# ============================================================
# Creates a table from a csv file.
#
# NOTES:
# * Even if importing a csv file, it's easier to just consider
#   it as a file of strings.
# ============================================================


# FUNCTIONS --------------------------------------------------

function Usage()  {
    $script = $MyInvocation.ScriptName
    $usage = "powershell -file $script input.csv output.out"
    $examples = @(
        "powershell -file $script comingsoon91.csv comingsoon91.out"
        )

    Write-Host "Usage: " $usage
    Write-Host "Examples: "
    $examples | foreach { Write-Host "    " $_ }
}

function Pause()  {
    Write-Host "Press any key to continue ..."
    $host.UI.RawUI.ReadKey("NoEcho,IncludeKeyUp") | Out-Null
}

function IsValid( [string] $s )  {
    if ( $s -eq $NULL )  {
        return $FALSE
    }
    elseif ( $s -eq "" )  {
        return $FALSE
    }
    return $TRUE
}

function STEntriesComingSoon91( [string] $wrapper, [string] $ln )  {
    $arr = $ln.Split( ",", [System.StringSplitOptions]::None )

    Write-Output ( "                <$wrapper>" )

    $name = $arr[0]
    $type = $arr[1]
    $folder = $arr[-1]
    Write-Output ( "                    <stentry>" )
    if ( $wrapper -eq "sthead" )  {
        Write-Output ( "<lines>$name" )
        Write-Output ( "$type" )
        Write-Output ( "$folder</lines>" )
    }
    else  {
        Write-Output ( "<lines><apiname>$name</apiname>" )
        if ( IsValid( $folder ) )  {
            Write-Output ( "Type: $type" )
            Write-Output ( "Folder: <filepath>$folder</filepath></lines>" )
        }
        else  {
            Write-Output ( "Type: $type</lines>" )
        }
    }
    Write-Output ( "                    </stentry>" )

    $arr[2,3,4,5] | foreach-object  {
        $s = $_.Replace( "`"", "" )
        Write-Output ( "                    <stentry>$s</stentry>" )
    }

    Write-Output ( "                </$wrapper>" )
}



# GLOBAL VARIABLES -------------------------------------------


# MAIN -------------------------------------------------------

if ( $args.Count -gt 1 )  {
    $src = $args[0]
    $tgt = $args[1]

    $script = $MyInvocation.MyCommand.Name;

    $lines = Get-Content $src

    Write-Output ( "            <!-- This simpletable was generated by running: powershell -file $script $args -->" ) | Out-File  -FilePath $tgt  -Encoding "Default"
    Write-Output ( "            <simpletable relcolwidth=""4* 2* 1* 1* 1* 1* 4*"">" ) | Out-File  -FilePath $tgt  -Encoding "Default"  -Append

    # Extract the header from the file.
    STEntriesComingSoon91 "sthead" $lines[0] | Out-File  -FilePath $tgt  -Encoding "Default"  -Append

    # Process each row, but ignore the first line.
    $i = 0
    foreach ( $ln in $lines )  {
        if ( $i -gt 0 )  {
            STEntriesComingSoon91 "strow" $ln | Out-File  -FilePath $tgt  -Encoding "Default"  -Append
        }
        $i += 1
    }

    Write-Output ( "            </simpletable>" ) | Out-File  -FilePath $tgt  -Encoding "Default"  -Append


}
else  {
    Usage
}

# ============================================================
