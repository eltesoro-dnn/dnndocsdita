# Creates blurbs for the control-bar-to-persona-bar topic.
# USAGE: powershell -file mkcp2pb.ps1 menus-cp2pb.csv > cp2pb.out
#

function Wrapped( [string] $wrapper, [string] $text )  {
    $s = $text.Trim()
    if (( $s -eq "" ) -or ( $s -eq $NULL ))  {
        return $NULL
    }
    else  {
        return "<$wrapper>$s</$wrapper>"
    }
}
function WrappedArray( [string] $wrapper, [string[]] $arr )  {
    $wraparr = @()
    $arr | foreach  {
        if ( $wrapper -eq "uicontrol" )  {
            $wraparr += UIControl $_
        }
        else  {
            $wraparr += "<$wrapper>$_</$wrapper>"
        }
    }
    return $wraparr
}


function UIControl( [string] $s, [string] $type )  {
    if (( $s -eq "" ) -or ( $s -eq "???" ))  {
        return $NULL
    }
    elseif ( $s.StartsWith( "(" ) )  {
        return $s.Trim()
    }
    elseif ( $s.Contains( "<uicontrol>" ) )  {
        return $s.Trim()
    }
    else  {
        return "<uicontrol>$s</uicontrol>$type"
    }
}


function MkMenuCasc( [string[]] $menuopts )  {
    $arr = WrappedArray "uicontrol" $menuopts
    if ( $menuopts.Length -gt 1 )  {
        $combined = ([string]::Join( " ", $arr )).Trim()
        if (( $combined.StartsWith( "<uicontrol>" )) -and ( $combined.EndsWith( "</uicontrol>" )) )  {
            return "<menucascade>$combined</menucascade>"
        }
        else  {
            return $combined
        }
    }
    else  {
        return $arr[0]
    }
}


function WriteHeader( [string] $script, [string[]] $arglist )  {
    Write-Output( "        <!-- ====================================================== -->" )
    Write-Output( "        <!-- This section was generated by running: powershell -file $script $arglist -->" )
    Write-Output( "        <!-- START GENERATED SECTION -->" )
    Write-Output( "" )
}
function WriteTail()  {
    Write-Output( "" )
    Write-Output( "        <!-- END GENERATED SECTION -->" )
}


function StartSection( [string] $cp1, [string] $cp2 )  {
    $cp1tc = $cp1
    $cp1lc = $cp1.ToLower().Replace( " ", "-" )

    # If going from Common to Advanced, don't start a new section.
    if ( $cp2 -ne "Advanced" )  {
        Write-Output( "        <section id=""section-menu-changes-$cp1lc"">" )
        Write-Output( "            <title>$cp1tc</title>" )
    }
    Write-Output( "" )
}
function EndSection( [string] $cp2 )  {
    if ( $cp2 -ne "Common" )  {
        Write-Output( "        </section>" )
        Write-Output( "" )
    }
    Write-Output( "" )
}


function StartTable()  {
    Write-Output( "            <simpletable relcolwidth=""1* 1*"">" )
    Write-Output( "                <sthead>" )
    Write-Output( "                    <stentry><uicontrol>Control Panel/Bar</uicontrol></stentry>" )
    Write-Output( "                    <stentry><uicontrol>Persona Bar</uicontrol></stentry>" )
    Write-Output( "                </sthead>" )
}
function EndTable()  {
    Write-Output( "            </simpletable>" )
}



function WriteImg( [string] $cp1, [string] $cp2, [string] $cpimage )  {
    $cp1lc = $cp1.ToLower().Replace( " ", "-" )
    if ( $cp2 -eq "Common" -or $cp2 -eq "Advanced" )  {
        $alt = $cp1 + " - " + $cp2
    }
    else  {
        $alt = $cp1
    }
    Write-Output( "            <image outputclass=""img-scr-menu"" scalefit=""yes"" placement=""break"" align=""left"" href=""../common/img/$cpimage""><alt>Old Control Panel/Bar menu - $alt</alt></image>" )
    Write-Output( "" )
}


function WriteStentry( [string[]] $menuarr, [string] $tab1, [string] $tab2, [string] $field, [string] $howto, [string] $addinfo )  {
    $wmenu = MkMenuCasc $menuarr
    $wtab1 = UIControl $tab1
    $wtab2 = UIControl $tab2
    if ( $field.Contains( "`n" ) )  {
        $fldarr = WrappedArray "uicontrol" ($field).Split( "`n", [System.StringSplitOptions]::RemoveEmptyEntries )
    }
    else  {
        if ( $field )  {
            $fldarr = @( Wrapped "uicontrol" $field )
        }
        else  {
            $fldarr = $NULL
        }
    }

    if ( !($tab1) -and !($tab2) -and !($field) -and !($howto) -and !($addinfo) )  {
        Write-Output( "                    <stentry>$wmenu</stentry>" )
    }

    else  {
        Write-Output( "                    <stentry>" )

        if ( $tab1 )  {
            Write-Output( "                        <ol>" )

            Write-Output( "                            <li>$wmenu</li>" )

            Write-Output( "                            <li>$wtab1 tab</li>" )

            if ( $tab2 )  {
                Write-Output( "                            <li>$wtab2 subtab</li>" )
            }

            Write-Output( "                        </ol>" )
        }
        else  {
            Write-Output( "                            <p>$wmenu</p>" )
        }

        if ( $fldarr.Length -eq 1 )  {
            $item = $fldarr[0]
            Write-Output( "                        <p>Field: $item</p>" )
        }
        elseif ( $fldarr.Length -gt 1 )  {
            Write-Output( "                        <p>Fields:</p>" )
            Write-Output( "                        <ul>" )
            $fldarr | foreach {
                Write-Output( "                            <li>$_</li>" )
            }
            Write-Output( "                        </ul>" )
        }

        if ( $howto )  {
            Write-Output( "                       <p audience=""adm cmg""><xref format=""dita"" href=""$howto"">[how to]</xref></p>" )
        }

        if ( $addinfo )  {
            Write-Output( "                       <p>$addinfo</p>" )
        }

        Write-Output( "                    </stentry>" )
    }
}


function CopyTopLines( [string] $orig, [string] $pattern )  {
    $x = [System.Int64] ( Get-Content $orig | Select-String -Pattern $pattern | Select LineNumber ).LineNumber
    $lc = $x - 1
    Get-Content $orig -TotalCount $lc
}
function CloseFile( [string] $orig, [string] $pattern )  {
    Write-Output( "" )
    Write-Output( "    </body>" )
    Write-Output( "" )
    Write-Output( "</topic>" )
<#
    $l = ( Get-Content $orig | Measure-Object â€“Line ).Lines
    $x = ( Get-Content $orig | Select-String -Pattern $pattern | Select LineNumber ).LineNumber
    $l -= $x
    Get-Content $orig -Tail $x
#>
}


# MAIN
if ( $args.Count -gt 2 )  {
    $src = $args[0]
    $tgt = $args[1]
    $orig = $args[2]

    CopyTopLines $orig "===========" | Out-File  -FilePath $tgt  -Encoding "Default"

    $cmd = $MyInvocation.MyCommand.Name
    WriteHeader $cmd $args | Out-File  -FilePath $tgt  -Encoding "Default"  -Append

    # input csv - Select only the valid menu lines.
    $menulines = Import-Csv $src | Where { $_.pb1 }

    # What are the sections?
    $cpdivnames = $menulines | Select cpdiv -uniq
    foreach ( $cpdiv in $cpdivnames )  {

        # Find the lines with the current cpdiv.
        $cpdivlines = $menulines | Where { $_.cpdiv -eq $cpdiv.cpdiv }  # | Sort cp3
        $ln1 = $cpdivlines[0]

        # Start the section.
        StartSection $ln1.cp1 $ln1.cp2 | Out-File  -FilePath $tgt  -Encoding "Default"  -Append

        # Write the image.
        WriteImg $ln1.cp1 $ln1.cp2 $ln1.cpimage | Out-File  -FilePath $tgt  -Encoding "Default"  -Append

        # Start the table.
        StartTable | Out-File  -FilePath $tgt  -Encoding "Default"  -Append

        # Process each line. (1 line = 1 row)
        foreach ( $ln in $cpdivlines ) {
            Write-Output( "                <strow>" ) | Out-File  -FilePath $tgt  -Encoding "Default"  -Append
            WriteStentry @( $ln.cp1, $ln.cp3 ) $ln.cptab1 $ln.cptab2 $ln.cpfield | Out-File  -FilePath $tgt  -Encoding "Default"  -Append
            WriteStentry @( $ln.pb1, $ln.pb2 ) $ln.pbtab1 $ln.pbtab2 $ln.pbfield $ln.howto $ln.addinfo | Out-File  -FilePath $tgt  -Encoding "Default"  -Append
            Write-Output( "                </strow>" ) | Out-File  -FilePath $tgt  -Encoding "Default"  -Append
        }

        # End the table.
        EndTable | Out-File  -FilePath $tgt  -Encoding "Default"  -Append

        # End the section.
        EndSection $ln1.cp2 | Out-File  -FilePath $tgt  -Encoding "Default"  -Append
    }

    WriteTail | Out-File  -FilePath $tgt  -Encoding "Default"  -Append

    CloseFile $orig "END GENERATED SECTION" | Out-File  -FilePath $tgt  -Encoding "Default"  -Append
}
