# ============================================================
# Creates blurbs for the control-bar-to-persona-bar topic.
# ============================================================

function Usage()  {
    $script = $MyInvocation.ScriptName
    $usage = "powershell -file $script input.csv output.out"
    $examples = @(
        "powershell -file $script menus-cp2pb.csv cp2pb.out"
        )

    Write-Host "Usage: " $usage
    Write-Host "Examples: "
    $examples | foreach { Write-Host "    " $_ }
}


function StartBanner()  {
    $script = $MyInvocation.MyCommand.Name
    $argstr = [system.String]::Join( " ", $args )

    $xmlw.WriteComment( "======================================================" )
    $xmlw.WriteComment( "This section was generated by running: powershell -file $script $argstr" )
    $xmlw.WriteComment( "START GENERATED SECTION" )
}
function EndBanner()  {
    $xmlw.WriteComment( "END GENERATED SECTION" )
}


function UIControl(  [string] $s, [string] $type )  {
    $s = $s.Trim()
    if ( $type )  { $s += $type }
    if (( $s -eq "" ) -or ( $s -eq "???" ))  {
        return( "" )
    }
    elseif ( $s.StartsWith( "(" ) )  {
        return( $s.Trim() )
    }
    elseif ( $s.Contains( "<uicontrol>" ) )  {
        return( $s.Trim() )
    }
    else  {
        if ( $type )  { $xmlw.WriteElementString( "uicontrol", { $s.Trim() + $type } ) }
        else          { $xmlw.WriteElementString( "uicontrol", { $s.Trim() } ) }
    }
}


function MkTableHeader()  {
    $xmlw.WriteStartElement( "sthead" )
        $xmlw.WriteElementString( "stentry", { UIControl "Control Panel/Bar" } )
        $xmlw.WriteElementString( "stentry", { UIControl "Persona Bar" } )
    $xmlw.WriteEndElement()  # sthead
}


function InsertImage( [string] $imgfn, [string] $alt )  {
    $xmlw.WriteStartElement( "image" )
        $xmlw.WriteAttributeString( "outputclass", "img-scr-menu" )
        $xmlw.WriteAttributeString( "scalefit", "yes" )
        $xmlw.WriteAttributeString( "placement", "break" )
        $xmlw.WriteAttributeString( "align", "left" )
        $xmlw.WriteAttributeString( "href", $imgfn )
        $xmlw.WriteElementString( "alt", $alt )
    $xmlw.WriteEndElement()  # image
}


function MkMenuCasc( [string[]] $menuopts, [string] $wrapper )  {
    if (( $wrapper -ne $null ) -and ( $wrapper -ne "" ))  {
        $xmlw.WriteStartElement( $wrapper )
        $menuopts | foreach  {
            $xmlw.WriteElementString( "menucascade", { UIControl( $opt ) } )
        }
        $xmlw.WriteEndElement()  # $wrapper
    }
    else  {
        $xmlw.WriteElementString( "menucascade", $str );
    }
}


function ProcessField( [string] $field )  {
    if (( $field -ne $null ) -and ( $field -ne "" ))  {
        $fieldarr = ($field).Split( "`r`n", [System.StringSplitOptions]::None )
        if ( $fieldarr.Length -gt 1 )  {
            $xmlw.WriteElementString( "p", "Fields:")
            $xmlw.WriteStartElement( "ul" )
                foreach ( $field in $fieldarr )  {
                    $xmlw.WriteElementString( "li", { UIControl $_ } )
                }
            $xmlw.WriteEndElement()  # ul
        }
        else  {
            $wrappedfield = UIControl $field
            $xmlw.WriteElementString( "p", "Field: $wrappedfield" )
        }
    }
}


function MkStentry( [string[]] $menuopts, [string[]] $tabs, [string] $field, [string] $howto, [string] $addinfo )  {
    $xmlw.WriteStartElement( "stentry" )

        # if there are tabs, then use an ordered list.
        if ( $tabs.Length -gt 0 )  {
            $xmlw.WriteStartElement( "ol" )  #start ol
                # menu cascade
                MkMenuCasc( [ref] $xmlw.value, $menuopts, "li" )
                # tabs and subtabs
                $tabs | foreach  {
                    $xmlw.WriteElementString( "li", $_ )
                }
                # fields
                ProcessField( [ref] $xmlw.value, $field )
            $xmlw.WriteEndElement()  #end ol
        }
        # if there are no pbtabs,
        else  {
            # menu cascade
            MkMenuCasc( [ref] $xmlw.value, $menuopts, "li" )
            # fields
            ProcessField( [ref] $xmlw.value, $field )
        }

        if ( $howto )  {
            $xmlw.WriteStartElement( "p" )
                $xmlw.WriteAttributeString( "audience", "adm cmg" )
                $xmlw.WriteStartElement( "xref" )
                    $xmlw.WriteAttributeString( "format", "dita" )
                    $xmlw.WriteAttributeString( "href", $howto )
                    $xmlw.WriteString( "[how to]" )
                $xmlw.WriteEndElement()  #end xref
            $xmlw.WriteEndElement()  #end p
        }

        if ( $addinfo )  {
            $xmlw.WriteElementString( "p", $addinfo )
        }

    $xmlw.WriteEndElement()  # stentry
}




# MAIN -------------------------------------------------------

if ( $args.Count -gt 1 )  {
    $infn  = $args[0]
    $outfn = $args[1]

    # input csv
    $csvstruct = Import-Csv $infn
    $menulines = $csvstruct | Where { $_.pb1 }  # Select only the valid menu lines.

    # output xml - BUGBUG: $xmlw is used as a global variable.
    $xmlw = New-Object System.Xml.XmlTextWriter( $outfn, $NULL )
    $xmlw.Formatting = "Indented"
    $xmlw.Indentation = "4"

    $xmlw.WriteStartDocument()
    # Set the XSL
    # $XSLPropText = "type='text/xsl' href='style.xsl'"
    # $xmlw.WriteProcessingInstruction("xml-stylesheet", $XSLPropText)

    $xmlw.WriteStartElement( "topic" )
    $xmlw.WriteStartElement( "body" )

        StartBanner

        # Each cpdiv is a single table. Each table is preceded by an image of the menu.
        $cpdivnames = $menulines | Select cpdiv -uniq
        foreach ( $cpdiv in $cpdivnames )  {

            $xmlw.WriteStartElement( "section" )  #start section
                $xmlw.WriteAttributeString( "id", "section-menu-changes-admin" )

                $xmlw.WriteElementString( "title", "Admin" )

                InsertImage "../common/img/$cpimage" "Old Control Panel/Bar menu - $_.cp1 >> $_.cp2"

                $xmlw.WriteStartElement( "simpletable" )  #start simpletable
                    # MkTableHeader
                    $xmlw.WriteStartElement( "sthead" )
                        $xmlw.WriteElementString( "stentry", { UIControl "Control Panel/Bar" } )
                        $xmlw.WriteElementString( "stentry", { UIControl "Persona Bar" } )
                    $xmlw.WriteEndElement()  # sthead

                    $cpdivlines = $menulines | Where { $_.cpdiv -eq $cpdiv.cpdiv } | Sort cp3
                    $cpdivlines | foreach  {
                        $xmlw.WriteStartElement( "strow" )  #start strow
                            MkStentry @( $_.cp1, $_.cp2, $_.cp3 ) @( $_.cptab1, $_.cptab2 ) $cpfield              # Control Panel
                            MkStentry @( $_.pb1, $_.pb2 ) @( $_.pbtab1, $_.pbtab2 ) $pbfield $howto $addinfo    # Persona Bar
                        $xmlw.WriteEndElement()  #end strow
                    }
                $xmlw.WriteEndElement()  #end simpletable
            $xmlw.WriteEndElement()  #end section
        }

        # EndBanner
        $xmlw.WriteString( "END GENERATED SECTION" )

    $xmlw.WriteEndElement()  # body
    $xmlw.WriteEndElement()  # topic

    $xmlw.WriteEndDocument()

    # Finish The Document
    # $xmlw.Finalize()  #BUGBUG: [System.Xml.XmlTextWriter] does not contain a method named 'Finalize'.
    $xmlw.Flush()
    $xmlw.Close()

}
else  {
    Usage
}

# ============================================================
