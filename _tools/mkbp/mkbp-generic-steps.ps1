# Creates the boilerplates for steps.
# USAGE: powershell -file mkbp-generic-steps.ps1 rolessteps.in .\out\bptext-rolessteps.dita
#
# WARNINGS:
#   * For overlays on the image:
#       - Do NOT use "align=". It creates a <div> around the image.
#       - Do NOT use "placement="break"". It adds <br/> before and after the image.


function MkStartSection  {
    param( [string] $thisscript, [string] $srccsv, [string] $fn )
    Write-Output ""
    Write-Output ""
    Write-Output "        <!-- =================================================== -->"
    Write-Output "        <!-- This section was generated by running: powershell -file $thisscript $srccsv > $fn.out -->"
    Write-Output "        <!-- START GENERATED SECTION -->"
}

function MkEndSection  {
    Write-Output ""
    Write-Output "        <!-- END GENERATED SECTION -->"
    Write-Output "        <!-- =================================================== -->"
    Write-Output ""
    Write-Output ""
}


function MkNote  {
    param( [string] $fn, [string] $name, [string] $cmd )

    Write-Output ""
    Write-Output "            <!-- <note conref=""$conreffile/$name""></note> -->"
    Write-Output "            <note type=""note"" id=""$name"">$cmd</note>"
}

function MkPh  {
    param( [string] $fn, [string] $name, [string] $cmd )

    Write-Output ""
    Write-Output "            <!-- <ph conref=""$conreffile/$name""></ph> -->"
    Write-Output "            <p><ph id=""$name"">$cmd</ph></p>"
}

function MkConref  {
    param( [string] $str )

    $refname = $str
    if ( $str.StartsWith("conref=") )  {
        $refname = $str.Substring( "conref=".Length )
    }
    $refarr = $refname.Split( "-", [System.StringSplitOptions]::None )
    $reftype = $refarr[0]

    if ( $reftype -eq "simpletable" )  {
        $conref = "<simpletable conref=""$conreffile/$refname""><sthead><stentry/></sthead><strow><stentry/></strow></simpletable>"
    }
    elseif ( $reftype -eq "substeps" )  {
        $conref = "<substeps conref=""$conreffile/$refname""><substep><cmd/></substep></substeps>"
    }
    elseif ( $reftype -eq "choices" )  {
        $conref = "<choices conref=""$conreffile/$refname""><choice/></choices>"
    }
    elseif ( $reftype -eq "ph" )  {
        $conref = "<p><ph conref=""$conreffile/$refname""></ph></p>"
    }
    else  {
        $conref = "<$reftype conref=""$conreffile/$refname""></$reftype>"
    }

    return $conref
}

function HandleAddOns  {
    param( [string] $addons )

    $addarr = $addons.Split( ",", [System.StringSplitOptions]::None )

    foreach ( $refname in $addarr )  {
        $add = MkConref $refname
        Write-Output "                $add"
    }
}

function MkStep  {
    param( [string] $fn, [string] $name, [string] $cmd, [string] $img, [string] $info, [string] $addons )

    Write-Output ""
    Write-Output "            <!-- <step conref=""$conreffile/$name""><cmd/></step> -->"
    Write-Output "            <step id=""$name"">"
    Write-Output "                <cmd>$cmd</cmd>"

    if ( $addons -ne "" )  {
        HandleAddOns $addons
    }

    if ( $info.StartsWith("conref=") )  { $info = MkConref $info }
    if (( $img ) -and ( $info ))  {
        Write-Output "                <info>"
        Write-Output "                    <image outputclass=""img-scr"" scalefit=""yes"" placement=""break"" align=""left"" href=""../../common/img/$img""><alt></alt></image>"
        Write-Output "                    $info"
        Write-Output "                </info>"
    }
    elseif ( $img )  {
        Write-Output "                <info><image outputclass=""img-scr"" scalefit=""yes"" placement=""break"" align=""left"" href=""../../common/img/$img""><alt></alt></image></info>"
    }
    elseif ( $info )  {
        Write-Output "                <info>$info</info>"
    }

    Write-Output "            </step>"
}


# MAIN
if ( $args.Count -gt 1 )  {
    $srccsv = $args[0]
    $fn = $srccsv.split('\.')[-2]
    $conreffile = "bptext-$fn.dita#tsk-bptext-$fn"
    $tgtfile = $args[1]

    $thisscript = $MyInvocation.MyCommand.Name

    Write-Output ""  | Out-File $tgtfile -Encoding DEFAULT

    MkStartSection $thisscript $srccsv $fn | Out-File $tgtfile -Append -Encoding DEFAULT
    foreach ( $ln in ( Import-Csv $srccsv ) )  {
        if ( ($ln.name).StartsWith("note-") ) {
            MkNote $fn $ln.name $ln.cmd | Out-File $tgtfile -Append -Encoding DEFAULT
        }
        elseif( ($ln.name).StartsWith("ph-") )  {
            MkPh $fn $ln.name $ln.cmd | Out-File $tgtfile -Append -Encoding DEFAULT
        }
    }
    MkEndSection | Out-File $tgtfile -Append -Encoding DEFAULT

    MkStartSection $thisscript $srccsv $fn | Out-File $tgtfile -Append -Encoding DEFAULT
    foreach ( $ln in ( Import-Csv $srccsv ) )  {
        if ( ($ln.name).StartsWith("step-") ) {
            MkStep $fn $ln.name $ln.cmd $ln.img $ln.info $ln.addons | Out-File $tgtfile -Append -Encoding DEFAULT
        }
    }
    MkEndSection | Out-File $tgtfile -Append -Encoding DEFAULT

}
