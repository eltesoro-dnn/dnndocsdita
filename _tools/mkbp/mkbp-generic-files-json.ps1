# Creates the boilerplates for steps.
# USAGE: powershell -file mkbp-generic-files-json.ps1 rolesfiles.json bptext-rolessteps prolog.txt presteps.txt .\out
#
# WARNINGS:
#   * For overlays on the image:
#       - Do NOT use "align=". It creates a <div> around the image.
#       - Do NOT use "placement="break"". It adds <br/> before and after the image.


function MkStartSection( [string] $thisscript, [string] $params )  {
    Write-Output ""
    Write-Output ""
    Write-Output "        <!-- =================================================== -->"
    Write-Output "        <!-- This section was generated by running: powershell -file $thisscript $params -->"
    Write-Output "        <!-- START GENERATED SECTION -->"
}

function MkEndSection  {
    Write-Output ""
    Write-Output "        <!-- END GENERATED SECTION -->"
    Write-Output "        <!-- =================================================== -->"
    Write-Output ""
    Write-Output ""
}

function MkBPNote( [string] $conreffile, [string] $id, [string] $text )  {
    Write-Output ""
    Write-Output "            <!-- <note conref=""$conreffile/$id""></note> -->"
    Write-Output "            <note type=""note"" id=""$id"">$text</note>"
}

function MkBPPh( [string] $conreffile, [string] $id, [string] $text )  {
    Write-Output ""
    Write-Output "            <!-- <ph conref=""$conreffile/$id""></ph> -->"
    Write-Output "            <p><ph id=""$id"">$text</ph></p>"
}

function MkConref( [string] $str, [boolean] $wrapph )  {
    $refname = $str
    if ( $str.StartsWith("conref=") )  {
        $refname = $str.Substring( "conref=".Length )
        return( ExpandConref $refname $wrapph )
    }
    elseif ( $str.StartsWith("img=") )  {
        $refname = $str.Substring( "img=".Length )
        return( ExpandedImg $refname )
    }

}

function ExpandConref( [string] $str, [boolean] $wrapph )  {
    $refarr = $str.Split( "-", [System.StringSplitOptions]::None )
    $reftype = $refarr[0]

    if ( $reftype -eq "simpletable" )  {
        return "<simpletable conref=""$conreffile/$str""><sthead><stentry/></sthead><strow><stentry/></strow></simpletable>"
    }
    elseif ( $reftype -eq "substeps" )  {
        return "<substeps conref=""$conreffile/$str""><substep><cmd/></substep></substeps>"
    }
    elseif ( $reftype -eq "choices" )  {
        return "<choices conref=""$conreffile/$str""><choice/></choices>"
    }
    elseif ( $reftype -eq "ph" )  {
        if ( $wrapph )  {
            return "<p><ph conref=""$conreffile/$str""></ph></p>"
        }
        else  {
            return "<ph conref=""$conreffile/$str""></ph>"
        }
    }
    else  {
        return "<$reftype conref=""$conreffile/$str""></$reftype>"
    }
}

function ExpandedImg( [string] $img )  {
    if ( $img.StartsWith( "scr-" ) )  {
        return "<image outputclass=""img-scr"" scalefit=""yes"" placement=""break"" align=""left"" href=""../../common/img/$img""><alt></alt></image>"
    }
    elseif ( $img.StartsWith( "gra-" ) )  {
        return "<image outputclass=""img-gra"" scalefit=""yes"" placement=""break"" align=""left"" href=""../../common/img/$img""><alt></alt></image>"
    }
    elseif ( $img.StartsWith( "ico-" ) )  {
        return "<image outputclass=""img-ico"" scalefit=""yes"" placement=""break"" align=""left"" href=""../../common/img/$img""><alt></alt></image>"
    }
    else  {
        return "<image outputclass=""img"" scalefit=""yes"" placement=""break"" align=""left"" href=""../../common/img/$img""><alt></alt></image>"
    }
}

function MkInfo( [string] $img, [string] $info, [string] $indent )  {
    if (( $img ) -and ( $info ))  {
        $info = MkConref $info $TRUE
        Write-Output "$indent<info>"
        Write-Output "$indent    $expimg"
        Write-Output "$indent    $info"
        Write-Output "$indent</info>"
    }
    elseif ( $img )  {
        Write-Output "$indent<info>$expimg</info>"
    }
    elseif ( $info )  {
        $info = MkConref $info $TRUE
        Write-Output "$indent<info>$info</info>"
    }
}

function MkStep( [string] $conreffile, [PSCustomObject] $step )  {
    $id = $step.id
    $cmd = $step.cmd
    $substeps = $step.substeps
    $img = $step.img
    $expimg = ExpandedImg $img
    $info = $step.info
    Write-Output ""
    Write-Output "            <!-- <step conref=""$conreffile/$id""><cmd/></step> -->"
    Write-Output "            <step id=""$id"">"
    Write-Output "                <cmd>$cmd</cmd>"

    if ( $substeps )  {
        if ( $substeps -is [system.array] )  {
            foreach ( $substep in $substeps )  {
                Write-Output "                <substeps>"
                Write-Output "                    <substep>"
                if ( $substep.cmd )  {
                    $cmd = $substep.cmd
                    Write-Output "                        <cmd>$cmd</cmd>"
                }
                if ( $substep.img -and $substep.info )  {
                    $img = $substep.img
                    $info = $substep.info
                    MkInfo $img $info "                        "
                }
                Write-Output "                    </substep>"
                Write-Output "                </substeps>"
            }
        }
        else  {
            $expanded = MkConref $substeps $FALSE
            Write-Output "                $expanded"
        }
    }

    MkInfo $img $info "                "

    Write-Output "            </step>"
}


function NavDashed( [PSCustomObject] $topic )  {
    if ( $nav )  {
        return ($topic.nav.ToLower()).Replace( " ", "-" )
    }
    elseif ( $title )  {
        return ($topic.title.ToLower()).Replace( " ", "-" )
    }
    else  {
        return ""
    }
}


function WriteDocType( [string] $topictype, [string] $navdashed )  {
    switch ( $topictype )  {
        "task"  {
            Write-Output "<!DOCTYPE $topictype PUBLIC ""-//OASIS//DTD DITA General Task//EN"" ""http://docs.oasis-open.org/dita/v1.2/os/dtd1.2/technicalContent/dtd/generaltask.dtd"">"
            Write-Output "<$topictype xml:lang=""en"" id=""tsk-$navdashed"">"
        }
        "topic"  {
            Write-Output "<!DOCTYPE $topictype PUBLIC ""-//OASIS//DTD DITA Topic//EN"" ""http://docs.oasis-open.org/dita/v1.2/os/dtd1.2/technicalContent/dtd/topic.dtd"">"
            Write-Output "<$topictype xml:lang=""en"" id=""top-$navdashed"">"
        }
        "reference"  {
            Write-Output "<!DOCTYPE $topictype PUBLIC ""-//OASIS//DTD DITA Reference//EN"" ""http://docs.oasis-open.org/dita/v1.2/os/dtd1.2/technicalContent/dtd/reference.dtd"">"
            Write-Output "<$topictype xml:lang=""en"" id=""ref-navdashed"">"
        }
    }
}

function BodyTag( [string] $topictype )  {
    switch ( $topictype )  {
        "task"  {
            return "taskbody"
        }
        "topic"  {
            return "body"
        }
        "reference"  {
            return "refbody"
        }
    }
}

function MkTopic( [string] $topictype, [string] $conreffile, [PSCustomObject] $topic )  {
    $navdashed = NavDashed $topic
    if ( -not $navdashed )  {
        Write-Host "ERROR: No title or navtitle in:`r`n$topic"
    }

    Write-Output "<?xml version=""1.0"" encoding=""utf-8"" standalone=""no""?>"
    WriteDocType $topictype $navdashed

    $title = $topic.title
    Write-Output ""
    Write-Output "    <title>$title</title>"
    if ( $topic.nav )  {
        $nav = $topic.nav
        Write-Output "    <titlealts>"
        Write-Output "        <navtitle>$nav</navtitle>"
        Write-Output "    </titlealts>"
    }
    Write-Output  ""
    Write-Output  ""
    Get-Content $prologfn
    Write-Output ""
    Write-Output ""

    $bodytag = BodyTag $topictype
    Write-Output "    <$bodytag>"

    Write-Output ""
    Get-Content $prestepsfn
    Write-Output ""

    if ( $topic.note )  {
        $note = ExpandConref $topic.note
        if ( $topic.note.StartsWith( "note-" ) )  {
            Write-Output "        <section>$note</section>"
        }
        else  {
            Write-Output "        <section><note>$note</note></section>"
        }
    }

    if (( $topic.steps ) -and ( $topictype -eq "task" ))  {
        Write-Output ""
        Write-Output "        <steps>"
        foreach ( $step in $topic.steps )  {
            if ( $step.StartsWith( "step-pbar-" ) )  {
                $arr = $step.Split( " ", [System.StringSplitOptions]::None )
                $name = $arr[0].SubString( "step-pbar-".Length )
                foreach( $role in @($arr[1..($arr.length-1)]) )  {
                    Write-Output "            <step audience=""$role"" conkeyref=""k-bppbar/step-pb-$role-$name-E90""><cmd/></step>"
                }
            }
            elseif ( $step.StartsWith( "step-" ) )  {
                Write-Output "            <step conref=""$conreffile/$step""><cmd/></step>"
            }
            else  {
                Write-Output "            <step><cmd>$step</cmd></step>"
            }
        }
        Write-Output "        </steps>"
        Write-Output ""
    }

    if ( $topic.result )  {
        $resultfull = MkConref $topic.result $FALSE
        Write-Output "        <result>$resultfull</result>"
        Write-Output ""
    }

    Write-Output "    </$bodytag>"
    Write-Output ""
    Write-Output "</$topictype>"
    Write-Output ""
}




# MAIN
if ( $args.Count -gt 0 )  {
    $srcfn = $args[0]
    $bpfnbase = $args[1]
    $prologfn = $args[2]
    $prestepsfn = $args[3]
    $tgtdir = $args[4]

    $conreffile = "$bpfnbase.dita#tsk-$bpfnbase"
    $tgtfile = "$tgtdir\$bpfnbase.dita"

    $thisscript = $MyInvocation.MyCommand.Name
    $params = [string]::Join( " ", $args )

    $myjson = Get-Content -Raw -Path $srcfn | ConvertFrom-Json




    # BPTEXT -------------------------------------------------------

    Write-Output "" | Out-File $tgtfile -Encoding DEFAULT

    # NOTES in bptext*
    MkStartSection $thisscript $params | Out-File $tgtfile -Append -Encoding DEFAULT
    foreach ( $pair in $myjson.bpsection ) {
        $id = $pair.id
        if ( $id.StartsWith( "note-" ) )  {
            MkBPNote $conreffile $id $pair.text | Out-File $tgtfile -Append -Encoding DEFAULT
        }
        elseif ( $id.StartsWith( "ph-" ) )  {
            MkBPPh $conreffile $id $pair.text | Out-File $tgtfile -Append -Encoding DEFAULT
        }
        # elseif ( $id.StartsWith( "...-" ) )
    }
    MkEndSection | Out-File $tgtfile -Append -Encoding DEFAULT

    # STEPS in bptext*
    MkStartSection $thisscript $params | Out-File $tgtfile -Append -Encoding DEFAULT
    foreach ( $step in $myjson.bpsteps ) {
        MkStep $conreffile $step | Out-File $tgtfile -Append -Encoding DEFAULT
    }
    MkEndSection | Out-File $tgtfile -Append -Encoding DEFAULT




    # TOPICS -------------------------------------------------------

    # TOPICS in individual files
    foreach( $topic in $myjson.topics )  {
        $nav = $topic.nav
        if ( $topic.nav )  {
            $tgtfile = $tgtdir + "\" + ($topic.nav.ToLower()).Replace( " ", "-" ) + ".dita"
        }
        else  {
            $tgtfile = $tgtdir + "\" + ($topic.title.ToLower()).Replace( " ", "-" ) + ".dita"
        }
        Write-Host "Creating $tgtfile...."
        MkTopic "task" $conreffile $topic | Out-File $tgtfile -Encoding DEFAULT
    }

}
