# Creates the boilerplates for steps.
# USAGE: powershell -file mkbp-generic-files-json.ps1 json\foo.json bptext-foo prolog.txt .\out
#
# WARNINGS:
#   * For overlays on the image:
#       - Do NOT use "align=". It creates a <div> around the image.
#       - Do NOT use "placement="break"". It adds <br/> before and after the image.


$fnPbarList = "..\getpbarbp\pbarbplist.txt"
$fnTagsList = "..\getpbarbp\tagsbplist.txt"

$notetypes = @( "note", "important", "remember", "tip", "warning", "trouble" )


function IsValid( [string] $s )  {
    if ( $s -eq $NULL )  {
        return $FALSE
    }
    elseif ( $s -eq "" )  {
        return $FALSE
    }
    return $TRUE
}

function IsNotValid( [string] $s )  { return ( !(IsValid $s) ) }


function AddAudience( [string] $s )  {
    if ( $s.Contains( "-host-" ) )  {
        $s = $s.Replace( "<step ", "<step audience=""adm"" " ).Replace( "<li ", "<li audience=""adm"" " )
    }
    ( "adm", "cmg", "mod" ) | foreach  {
        if ( $s.Contains( "-$_-" ) )  {
            $s = $s.Replace( "<step ", "<step audience=""$_"" " ).Replace( "<li ", "<li audience=""$_"" " )
        }
    }
    return $s
}


function MkStartSection( [string] $thisscript, [string] $params )  {
    Write-Output ""
    Write-Output ""
    Write-Output "        <!-- =================================================== -->"
    Write-Output "        <!-- This section was generated by running: powershell -file $thisscript $params -->"
    Write-Output "        <!-- START GENERATED SECTION -->"
}

function MkEndSection  {
    Write-Output ""
    Write-Output "        <!-- END GENERATED SECTION -->"
    Write-Output "        <!-- =================================================== -->"
    Write-Output ""
    Write-Output ""
}

function MkBPNote( [string] $conreffile, [PSCustomObject] $node, [string] $type )  {
    $id = $node.id
    $text = $node.text
    if ( IsNotValid $type )  {
        $type = "note"
    }
    Write-Output ""
    Write-Output "            <!-- <note conref=""$conreffile/$id""></note> -->"
    Write-Output "            <note type=""$type"" id=""$id"">$text</note>"
}

function MkBPP( [string] $conreffile, [PSCustomObject] $node )  {
    $id = $node.id
    $text = $node.text
    Write-Output ""
    Write-Output "            <!-- <p conref=""$conreffile/$id""></p> -->"
    Write-Output "            <p id=""$id"">$text</p>"
}

function MkBPPh( [string] $conreffile, [PSCustomObject] $node )  {
    $id = $node.id
    $text = $node.text
    Write-Output ""
    Write-Output "            <!-- <ph conref=""$conreffile/$id""></ph> -->"
    Write-Output "            <p><ph id=""$id"">$text</ph></p>"
}

function MkBPSimpleTable( [string] $conreffile, [PSCustomObject] $node )  {
    $id = $node.id
    $widths = ([string[]]$node.header.widths) -join " "

    Write-Output ""
    Write-Output "            <!-- <simpletable conref=""$conreffile/$id""><sthead><stentry/></sthead><strow><stentry/></strow></simpletable> -->"
    Write-Output "            <simpletable id= relcolwidth=""1* 3*"">"
    Write-Output "                <sthead>"
    foreach( $title in $node.header.titles )  {
        Write-Output "                    <stentry>$title</stentry>"
    }
    Write-Output "                </sthead>"

    foreach( $row in $node.rows )  {
        Write-Output "                <strow>"
        foreach( $entry in $row )  {
            Write-Output "                    <stentry>$entry</stentry>"
        }
        Write-Output "                </strow>"
    }
    Write-Output "            </simpletable>"
}

function MkConref( [string] $str, [string] $wrapph )  {
    $refarr = $str.Split( "=/", [System.StringSplitOptions]::None )

    if ( $refarr[0] -eq "conref" )  {
        $name = $refarr[1]
        $namearr = $name.Split( "-", [System.StringSplitOptions]::None )
        $fullref = "conref=""$conreffilelocal/$name"""
        return( ExpandedConref $namearr[0] $fullref $wrapph )
    }

    elseif ( $refarr[0] -eq "conkeyref" )  {
        $name = $refarr[1]
        $namearr = $name.Split( "-", [System.StringSplitOptions]::None )
        $refkey = $refarr[2]
        $fullref = "conkeyref=""$refkey/$name"""
        return( ExpandedConref $namearr[0] $fullref $wrapph )
    }

    elseif ( $refarr[0] -eq "img" )  {
        return( ExpandedImg $refarr[1] )
    }
    else  {
        if ( IsValid $wrapph )  {
            return( "<$wrapph>$str</$wrapph>" )
        }
        else  {
            return( $str )
        }
    }
}

# Only called by function MkConref.
function ExpandedConref( [string] $reftype, [string] $conrefstr, [string] $wrapph )  {

    if ( $notetypes -contains $reftype )  {
        return "<note type=""$reftype"" $conrefstr></note>"
    }
    elseif ( $reftype -eq "simpletable" )  {
        return "<simpletable $conrefstr><sthead><stentry/></sthead><strow><stentry/></strow></simpletable>"
    }
    elseif ( $reftype -eq "substeps" )  {
        return "<substeps $conrefstr><substep><cmd/></substep></substeps>"
    }
    elseif ( $reftype -eq "choices" )  {
        return "<choices $conrefstr><choice/></choices>"
    }
    elseif ( $reftype -eq "ul" )  {
        return "<ul $conrefstr><li/></ul>"
    }
    elseif ( $reftype -eq "ph" )  {
        if ( $wrapph )  {
            return "<$wrapph><ph $conrefstr></ph></$wrapph>"
        }
        else  {
            return "<ph $conrefstr></ph>"
        }
    }
    else  {
        return "<$reftype $conrefstr></$reftype>"
    }
}

function ExpandedImg( [string] $img, [string] $alt )  {
    $outputclass = "img"
    foreach ( $imgtype in ( "scr", "gra", "ico" ) ) {
        if ( $img.StartsWith( "$imgtype-" ) ) {
            $outputclass = "img-$imgtype"
        }
    }
    return "<image outputclass=""$outputclass"" scalefit=""yes"" placement=""break"" align=""left"" href=""../../common/img/$img""><alt>$alt</alt></image>"
}

function MkInfo( [string] $imgfn, [string] $imgalt, [string] $info, [string] $indent )  {
    if ( IsValid $imgfn )  {
        $expimg = ExpandedImg $imgfn $imgalt
    }

    if ( IsValid $info )  {
        $info = MkConref $info "p"
    }

    if (( IsValid $imgfn ) -and ( IsValid $info ))  {
        Write-Output "$indent<info>"
        Write-Output "$indent    $expimg"
        Write-Output "$indent    $info"
        Write-Output "$indent</info>"
    }
    elseif ( IsValid $imgfn )  {
        Write-Output "$indent<info>$expimg</info>"
    }
    elseif ( IsValid $info )  {
        Write-Output "$indent<info>$info</info>"
    }
}

function MkStep( [string] $conreffile, [PSCustomObject] $step )  {
    $id = $step.id
    $cmd = MkConRef $step.cmd cmd
    $substeps = $step.substeps
    $img = $step.img
    $info = $step.info
    $xmp = $step.xmp
    $result = $step.result
    Write-Output ""
    Write-Output "            <!-- <step conref=""$conreffile/$id""><cmd/></step> -->"
    Write-Output "            <step id=""$id"">"
    Write-Output "                $cmd"

    if ( $img -is [String] )  {
        MkInfo $img "" $info "                "
    }
    else  {
        MkInfo $img.fn $img.alt $info "                "
    }

    if ( $substeps )  {
        if ( $substeps -is [system.array] )  {
            Write-Output "                <substeps>"
            foreach ( $substep in $substeps )  {
                Write-Output "                    <substep>"
                if ( $substep.cmd )  {
                    $subcmd = $substep.cmd
                    Write-Output "                        <cmd>$subcmd</cmd>"
                }
                if ( $substep.img -or $substep.info )  {
                    $subimg = $substep.img
                    $subinfo = $substep.info
                    if ( $img -is [String] )  {
                        MkInfo $subimg "" $subinfo "                        "
                    }
                    else  {
                        MkInfo $subimg.fn $subimg.alt $subinfo "                        "
                    }
                }
                Write-Output "                    </substep>"
            }
            Write-Output "                </substeps>"
        }
        elseif ( $choices -is [system.array] )  {
            Write-Output "                <choices>"
            foreach ( $choice in $choices )  {
                Write-Output "                    <choice>$choice</choice>"
            }
            Write-Output "                </choices>"
        }
        else  {
            $expanded = MkConref $substeps
            Write-Output "                $expanded"
        }
    }

    if ( $xmp )  {
        Write-Output "                <stepxmp>Example: $xmp</stepxmp>"
    }

    if ( $result )  {
        Write-Output "                <stepresult>Result: $result</stepresult>"
    }

    Write-Output "            </step>"
}


function NavDashed( [PSCustomObject] $topic )  {
    if ( $nav )  {
        return ( $topic.nav.ToLower()).Replace( " ", "-" )
    }
    elseif ( $title )  {
        return ( $topic.title.ToLower()).Replace( " ", "-" )
    }
    else  {
        return ( "" )
    }
}


function WriteDocType( [string] $topictype, [string] $navdashed )  {
    switch ( $topictype )  {
        "task"  {
            Write-Output "<!DOCTYPE $topictype PUBLIC ""-//OASIS//DTD DITA General Task//EN"" ""http://docs.oasis-open.org/dita/v1.2/os/dtd1.2/technicalContent/dtd/generaltask.dtd"">"
            Write-Output "<$topictype xml:lang=""en"" id=""tsk-$navdashed"">"
        }
        "topic"  {
            Write-Output "<!DOCTYPE $topictype PUBLIC ""-//OASIS//DTD DITA Topic//EN"" ""http://docs.oasis-open.org/dita/v1.2/os/dtd1.2/technicalContent/dtd/topic.dtd"">"
            Write-Output "<$topictype xml:lang=""en"" id=""top-$navdashed"">"
        }
        "reference"  {
            Write-Output "<!DOCTYPE $topictype PUBLIC ""-//OASIS//DTD DITA Reference//EN"" ""http://docs.oasis-open.org/dita/v1.2/os/dtd1.2/technicalContent/dtd/reference.dtd"">"
            Write-Output "<$topictype xml:lang=""en"" id=""ref-navdashed"">"
        }
    }
}


function BodyTag( [string] $topictype )  {
    switch ( $topictype )  {
        "task"  {
            return "taskbody"
        }
        "topic"  {
            return "body"
        }
        "reference"  {
            return "refbody"
        }
    }
}


function FindLines( [string] $fn, [string] $stepli, [string] $pathhyphen )  {
    $s = @()
    if ( Test-Path $fn )  {
        # Filter based on the hyphenated menu options (pathhyphen).
        Get-Content $fn | Where { $_.ToLower().Contains( $stepli.ToLower() ) -and $_.ToLower().Contains( $pathhyphen.ToLower() ) } | foreach  {
            $s += AddAudience $_
        }

        # BUGBUG: If there's both an adm line and a host line for pbar, choose host.
        $i = ( $s -like "*audience=""adm""*" ).Length
        if ( $i -gt 1 )  {
            $s = $s -notlike "*-adm-*"
        }
    }
    return $s
}


function MkTopic( [string] $topictype, [string] $conreffile, [PSCustomObject] $topic )  {
    $navdashed = NavDashed $topic
    if ( -not $navdashed )  {
        Write-Host "ERROR: No title or navtitle in:`r`n$topic"
    }
    else  {
        Write-Output "<?xml version=""1.0"" encoding=""utf-8"" standalone=""no""?>"
        WriteDocType $topictype $navdashed
    }

    if ( $topic.title )  {
        $title = $topic.title
        Write-Output ""
        Write-Output "    <title>$title</title>"
        if ( $topic.nav )  {
            $nav = $topic.nav
            Write-Output "    <titlealts>"
            Write-Output "        <navtitle>$nav</navtitle>"
            Write-Output "    </titlealts>"
        }
    }

    if ( $prologfn )  {
        Write-Output  ""
        Write-Output  ""
        Get-Content $prologfn
    }

    $bodytag = BodyTag $topictype
    Write-Output ""
    Write-Output ""
    Write-Output "    <$bodytag>"


    Write-Output ""
    if ( $g_avail )  {
        Write-Output "        <section conkeyref=""k-bptext/section-prodavail-$g_avail""></section>"
    }
    else  {
        Write-Output "        <section conkeyref=""k-bptext/section-prodavail-PCE""></section>"
    }

    if ( $topic.section )  {
        Write-Output ""
        Write-Output "        <section>"
        if ( $topic.section -is [system.array] )  {
            foreach ( $node in $topic.section )  {
                $text = MkConref $node.text $node.wrapper
                Write-Output "            $text"
            }
        }
        else  {
            $text = MkConref $topic.section
            Write-Output "            $text"
        }
        Write-Output "        </section>"
    }

    if ( $topic.prereqs )  {
        Write-Output ""
        Write-Output "        <prereq>"
        Write-Output "            <ul>"
        foreach ( $prereq in $topic.prereqs )  {
            $expanded = MkConref $prereq
            Write-Output "                <li>$expanded</li>"
        }
        Write-Output "            </ul>"
        Write-Output "        </prereq>"
    }

    if (( $topic.steps ) -and ( $topictype -eq "task" ))  {
        Write-Output ""
        Write-Output "        <steps>"
        foreach ( $step in $topic.steps )  {
            if ( $step.StartsWith( "step-pbar-" ) )  {
                $arr = $step.Split( " ", [System.StringSplitOptions]::None )
                $name = $arr[0].SubString( "step-pbar-".Length )
                FindLines $fnPbarList "<step" $name | foreach {
                    Write-Output "            $_"
                }
            }
            elseif ( $step.StartsWith( "step-pbtabs" ) )  {
                $arr = $step.Split( " ", [System.StringSplitOptions]::None )
                $name = $arr[0].SubString( "step-pbtabs-".Length )
                FindLines $fnTagsList "<step" $name | foreach {
                    Write-Output "            $_"
                }
            }
            elseif ( $step.StartsWith( "step-" ) )  {
                Write-Output "            <step conref=""$conreffile/$step""><cmd/></step>"
            }
            elseif ( $step.StartsWith( "stepsection-" ) )  {
                Write-Output "            <stepsection conref=""$conreffile/$step""><cmd/></stepsection>"
            }
            else  {
                Write-Output "            <step><cmd>$step</cmd></step>"
            }
        }
        Write-Output "        </steps>"
    }

    if ( $topic.result )  {
        $resultfull = MkConref $topic.result
        Write-Output ""
        Write-Output "        <result>$resultfull</result>"
    }

    if ( $topic.postreq )  {
        $text = MkConref $topic.postreq
        Write-Output ""
        Write-Output "        <postreq>$text</postreq>"
    }

    Write-Output ""
    Write-Output "    </$bodytag>"
    Write-Output ""
    Write-Output "</$topictype>"
    Write-Output ""
}




# MAIN
if ( $args.Count -gt 3 )  {
    $srcfn = $args[0]
    $bpfnbase = $args[1]
    $prologfn = $args[2]
    $tgtdir = $args[3]

    $conreffilelocal = "$bpfnbase.dita#tsk-$bpfnbase"

    $thisscript = $MyInvocation.MyCommand.Name
    $params = [string]::Join( " ", $args )

    $myjson = Get-Content -Raw -Path $srcfn | ConvertFrom-Json


    # GLOBAL -------------------------------------------------------

    foreach ( $node in $myjson.global ) {
        if ( $node.avail ) {
            $g_avail = $node.avail
        }
    }


    # BPTEXT -------------------------------------------------------

    $tgtfile = "$tgtdir\$bpfnbase.dita"
    Write-Output "" | Out-File $tgtfile -Encoding DEFAULT

    # NOTES in bptext*
    if ( $myjson.bpsection.Count -gt 0 )  {
        MkStartSection $thisscript $params | Out-File $tgtfile -Append -Encoding DEFAULT
        foreach ( $node in $myjson.bpsection ) {
            $id = $node.id
            $prefix = ($id.Split( "-", [System.StringSplitOptions]::None ))[0]

            # if it's a note
            if ( $notetypes -contains $prefix )  {
                MkBPNote $conreffilelocal $node $prefix | Out-File $tgtfile -Append -Encoding DEFAULT
            }

            # if it's something else
            switch ( $prefix ) {
                "p"             { MkBPP $conreffilelocal $node  | Out-File $tgtfile -Append -Encoding DEFAULT }
                "ph"            { MkBPPh $conreffilelocal $node | Out-File $tgtfile -Append -Encoding DEFAULT }
                "simpletable"   { MkBPSimpleTable $conreffilelocal $node | Out-File $tgtfile -Append -Encoding DEFAULT }
            }
        }
        MkEndSection | Out-File $tgtfile -Append -Encoding DEFAULT
    }

    # STEPS in bptext*
    if ( $myjson.bpsteps.Count -gt 0 )  {
        MkStartSection $thisscript $params | Out-File $tgtfile -Append -Encoding DEFAULT
        foreach ( $step in $myjson.bpsteps ) {
            MkStep $conreffilelocal $step | Out-File $tgtfile -Append -Encoding DEFAULT
        }
        MkEndSection | Out-File $tgtfile -Append -Encoding DEFAULT
    }



    # TOPICS -------------------------------------------------------

    # TOPICS in individual files
    foreach( $topic in $myjson.topics )  {
        $nav = $topic.nav
        if ( $topic.nav )  {
            $tgtfile = $tgtdir + "\" + ($topic.nav.ToLower()).Replace( " ", "-" ) + ".dita"
        }
        else  {
            $tgtfile = $tgtdir + "\" + ($topic.title.ToLower()).Replace( " ", "-" ) + ".dita"
        }
        Write-Host "Creating $tgtfile...."
        MkTopic "task" $conreffilelocal $topic | Out-File $tgtfile -Encoding DEFAULT
    }

}
