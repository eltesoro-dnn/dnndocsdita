# Creates the boilerplates for the tabs and subtabs after the Persona Bar menu.
# USAGE: powershell -file mkbp-pbtabs-steps.ps1 pbtabs-E90.csv mkbp-pbtabs-steps.out
#
# WARNINGS:
#   * For overlays on the image:
#       - Do NOT use "align=". It creates a <div> around the image.
#       - Do NOT use "placement="break"". It adds <br/> before and after the image.


$tabsep = "&gt;"
$fnprefix = "pbtabs-"
$fnsuffix = ".csv"


function RefreshFile( [string] $fn )  {
    Write-Host "Recreating $fn ...."
    if ( Test-Path -Path $fn )  {
        Remove-Item  $fn  -Force  | Out-Null
    }
    New-Item  $fn  -Type file  -Force | Out-Null
}

function IsValid( [string] $s )  {
    if ( $s -eq $NULL )  {
        return $FALSE
    }
    elseif ( $s -eq "" )  {
        return $FALSE
    }
    return $TRUE
}

function WriteHeader( [string] $script, [string[]] $arglist )  {
    Write-Output( "`r`n" )
    Write-Output( "        <!-- ========================================================== -->" )
    Write-Output( "        <!-- This section was generated by running: powershell -file $script $arglist -->" )
    Write-Output( "        <!-- START GENERATED SECTION -->" )
}
function WriteSectionHeader( [string] $prod, [string] $persona )  {
    Write-Output( "`r`n" )
    Write-Output( "        <!-- ==================== $prod - $persona ==================== -->" )
}
function WriteTail()  {
    Write-Output( "" )
    Write-Output( "        <!-- END GENERATED SECTION -->" )
}

function GetProdFromFilename( [string] $fn )  {
    $cleanfn = $fn.TrimStart( $fnprefix ).TrimEnd( $fnsuffix )
    return $cleanfn.Substring( 0, 3 )
}

function MkBlurb( [string] $prod, [string] $persona, [string] $menu1, [string] $menu2, [string] $tab1, [string] $tab2 )  {
    $menu1squa = $menu1.Replace( " ", "" )
    $menu2squa = $menu2.Replace( " ", "" )
    $tab1squa = $tab1.Replace( " ", "" )
    $tab2squa = ""
    $bpid = "pbtabs-$persona-$menu1squa-$menu2squa-$tab1squa-$prod"
    $imgfn = "scr-pbtabs-$persona-$menu1squa-$menu2squa-$tab1squa-$prod.png"
    $cascadealt = "$tab1"
    if ( IsValid $tab2 )  {
        $tab2squa = $tab2.Replace( " ", "" ).Replace( ".NET", "NET" )
        $bpid  = "pbtabs-$persona-$menu1squa-$menu2squa-$tab1squa-$tab2squa-$prod"
        $imgfn = "scr-pbtabs-$persona-$menu1squa-$menu2squa-$tab1squa-$tab2squa-$prod.png"
        $cascadealt = "$tab1 $tabsep $tab2"
    }

    Write-Output( "" )
    Write-Output( "" )
    Write-Output( "           <!-- <step conref=""bptext-pbtabs.dita#tsk-bptext-pbtabs/step-$bpid""><cmd/></step> -->" )
    Write-Output( "           <!-- <step conkeyref=""k-bppbtabs/step-$bpid""><cmd/></step> -->" )
    Write-Output( "           <!-- <li outputclass=""step""><ph outputclass=""cmd"" conkeyref=""k-bppbtabs/ph-$bpid""></ph></li> -->" )
    Write-Output( "           <!-- <cmd conkeyref=""k-bppbtabs/cmd-$bpid""></cmd> -->" )
    Write-Output( "           <!-- <info conkeyref=""k-bppbtabs/info-$bpid""></info> -->" )
    Write-Output( "           <step id=""step-$bpid"">" )
    if ( $tab2 -eq "" )  {
        Write-Output( "               <cmd id=""cmd-$bpid""><ph id=""ph-$bpid"">Go to the <uicontrol>$tab1</uicontrol> tab.</ph></cmd>" )
    }
    else  {
        Write-Output( "               <cmd id=""cmd-$bpid""><ph id=""ph-$bpid"">Go to the <uicontrol>$tab1</uicontrol> tab, and then the  <uicontrol>$tab2</uicontrol> subtab.</ph></cmd>" )
    }
    Write-Output( "               <info id=""info-$bpid"" outputclass=""init-hide"">" )
    Write-Output( "                   <image id=""image-$bpid"" outputclass=""img-scr"" scalefit=""yes"" href=""img/$imgfn""><alt>$cascadealt</alt></image>" )
    Write-Output( "               </info>" )
    Write-Output( "           </step>" )
}



# MAIN
if ( $args.Count -gt 1 )  {
    $infile = $args[0]
    $outfile = $args[1]
    $prod = GetProdFromFilename $infile

    RefreshFile $outfile
    $cmdargs = $args

    $csv = Import-Csv $infile

    WriteHeader $MyInvocation.MyCommand.Name $cmdargs | Out-File -Append $outfile
    ( "all", "host", "adm", "cmg", "mod" ) | foreach  {
        WriteSectionHeader $prod $_ | Out-File -Append $outfile
        foreach ( $ln in $csv )  {
            if ( IsValid $ln.tab1 )  {
                if (( $ln.$_ -eq $_ ) -or ( $ln.host -eq $_ ))  {
                    MkBlurb $prod $_ $ln.menu1 $ln.menu2 $ln.tab1 $ln.tab2 | Out-File -Append $outfile
                }
            }
        }
    }

    WriteTail | Out-File -Append $outfile
}
