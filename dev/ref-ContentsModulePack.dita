<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA $eference//EN" "http://docs.oasis-open.org/dita/v1.2/os/dtd1.2/technicalContent/dtd/reference.dtd">
<reference xml:lang="en" id="ref-ContentsModulePack">

    <title>Contents of a Module Package</title>

    <refbody>

        <section id="modulepkgcontents">

            <p>A module package includes the following:</p>
            <ul>
                <li><filepath>Properties\Assembly.cs</filepath> contains information about the module assembly. <!-- Confirm the file extension. Why is it a C# file? --></li>

                <li><filepath>References</filepath> contains the libraries required by the module.
                    <note type="note">The <filepath>DotNetNuke.dll</filepath> is required in all modules; it provides additional functionality, such as authentication and user information.</note>
                </li>

                <li>(Optional) <filepath>App_LocalResources\*.resx</filepath> are string tables that contain localized or translated terms.</li>

                <li><filepath>BuildScripts</filepath> (formerly <filepath>.build</filepath>) contains files required for MSBuild to compile the module and to assemble the installation file.</li>

                <li><filepath>Components\FeatureController.cs</filepath> contains the list of DNN interfaces that the module implements.</li>

                <li><filepath>Controllers</filepath> ??? </li>

                <draft-comment>
                    <!-- There is no Data folder in DNN8 templates.
                    <li><filepath>Data\DataProvider.cs</filepath> defines the abstract data provider's methods to access data. The abstract data provider hides the details of the concrete data provider, so that the module can access the data, whether the concrete data provider is a SQL database or an Oracle database.
                    <p>The <filepath>providers</filepath> folder contains the actual implementations (concrete data providers). A module can use multiple concrete data providers.</p>
                    </li>
                    -->
                </draft-comment>

                <li>(Optional) <filepath>Documentation\Documentation.html</filepath> describes the module functionality.</li>

                <li><filepath>Models</filepath> ??? </li>

                <li><filepath>Providers</filepath> contains the actual implementations of concrete data <xref format="html" scope="external" href="http://www.dnnsoftware.com/wiki/providers">providers</xref> required by the module.
                    <example>The <filepath>Providers\DataProviders\SQLDataProvider</filepath> subfolder contains three files:
                        <ul>
                            <li><filepath>00.00.01 SQLDataProvider</filepath> contains the SQL scripts that create tables and stored procedures required by the module to access the data. These scripts run when the module is installed.</li>
                            <li><filepath>Uninstall.SqlDataProvider</filepath> contains the SQL scripts that delete tables and stored procedures used by the module. These scripts run when the module is uninstalled.</li>
                            <li><filepath>SQLDataProvider.cs</filepath> sets the value of <varname>SqlConnection.ConnectionString</varname> and defines the concrete data provider class's methods to access data.</li>
                        </ul>
                    </example>
                </li>

                <li><filepath>Views</filepath> contains Razor-based template files (.cshtml) that are used to display the module's output in HTML format.</li>

                <li><filepath>*.dnn*</filepath> is the <xref format="dita" href="../common/Extensions/ref-DNNManifestSchema.dita">DNN Manifest</xref>, which specifies where files are copied during module installation.</li>

                <li><filepath>License.txt</filepath> and <filepath>ReleaseNotes.txt</filepath> are displayed when the module is installed. You can rename the files and specify the custom filenames in the DNN Manifest.</li>

                <li>(Optional) <filepath>module.css</filepath> defines how the module should be displayed. If the module is applied to a pane that has an assigned container, that container's CSS overrides the module's CSS. <!--Is this correct? Or the other way around? --></li>

                <li><b>packages.config</b> specifies the recommended .NET Framework version for the module.</li>

            </ul>

            <image scalefit="yes" placement="break" align="center" href="../../common/img/scr-VS2015SolutionExplorer.png"><alt>Visual Studio's Solution Explorer showing components of a module.</alt></image>

        </section>

    </refbody>


    <related-links>
        <link format="dita" href="../design/ref-ContentsThemePack.dita"><linktext>Contents of a Theme Package</linktext></link>
        <link format="dita" href="../common/Extensions/tsk-CreatePackage.dita"><linktext>Create the Package</linktext></link>
        <link format="html" scope="external" href="http://www.dnnsoftware.com/community-blog/cid/155065/what-is-a-module"><linktext>DNN Community Blog: What Is a Module by Clinton Patterson</linktext></link>
        <link format="html" scope="external" href="http://www.dnnsoftware.com/community-blog/cid/155075/module-development-templates"><linktext>DNN Community Blog: Module Development Templates by Clinton Patterson</linktext></link>
        <link format="html" scope="external" href="http://www.dnnsoftware.com/wiki/providers"><linktext>DNN Wiki: Providers</linktext></link>
    </related-links>

</reference>
