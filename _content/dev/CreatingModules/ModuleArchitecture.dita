<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.2/os/dtd1.2/technicalContent/dtd/concept.dtd">
<concept xml:lang="en" id="con-ModuleArchitecture">

    <title>Module Architecture</title>

    <prolog>
        <author>JMB</author>
        <copyright>
            <copyryear year="2016"></copyryear>
            <copyrholder>DNN Corp</copyrholder>
        </copyright>
        <metadata>
            <audience type="programmer" job="programming" />
        </metadata>
    </prolog>

    <conbody>
        <bodydiv conkeyref="k-bptext/bodydiv-breadcrumbs"></bodydiv>

        <section id="Overview">
            <p>Although every module provides a different set of features and functionality, some foundational architectural elements are common to virtually every module. Most DNN modules are developed using an n-tier architecture. Whether you build a Web Forms module, an MVC module, or a SPA module, you will implement most of these layers in your module.</p>
            <image scalefit="yes" placement="break" align="left" href="../../common/img/module-architecture.png"><alt>Module architecture</alt></image>
        </section>


        <section id="DataAccessLayer">
            <title>Data Access Layer</title>

            <p>DNN supports three Data Access Layer (DAL) frameworks: DAL, DAL+ and DAL2. All three are based on the same underlying provider model, which enables DNN to be used with different underlying database management systems.</p>

            <note type="note">DNN ships with a SQL Server database provider, which is used as the default . Other third-party providers are available for the following databases: Oracle, MySQL and MS Access; however, MySQL and MS Access providers are no longer maintained or supported.</note>

            <p>
                DAL is a fully abstracted implementation that requires the following:
                <ul>
                    <li>An abstract data provider class that defines your data layer API. </li>
                    <li>A concrete implementation of this abstract class for every database type you wish to support (typically just SQL Server). </li>
                    <li>Database scripts to create the stored procedures, tables and views your module requires.</li>
                </ul>
            </p>

            <p>DAL+ adds generic data access methods to the core platform to eliminate the need for the abstract and concrete data provider classes. You can still use alternate databases, and you must still provide the necessary database scripts.</p>

            <p>DAL2 uses the PetaPOCO Micro-ORM, which eliminates the need for writing stored procedures. DAL2 provides additional features, including integrated cache management which further simplifies your code.</p>

            <p>You can use any data access method, even those not directly supported by DNN. You can use more than one DAL technology within a single module.</p>

            <note type="tip">Use DAL2 for most of your standard CRUD queries and DAL+ for more complex queries that may require performance tuning. This approach simplifies development and lets you focus your performance tuning efforts where it will have the most impact.</note>

        </section>


        <section id="CachingLayer">
            <title>Caching Layer</title>

            <p>One of the slowest actions you can perform in any web application is accessing the database. In many systems, data is stored in a format that is different from the format in which it will be used. Applications often perform complex queries to filter the dataset and then alter the format of the results prior to use. If the database is not local, the query takes longer, depending on network speed. Database queries are orders of magnitude slower than using an in-memory cache, and should be avoided when possible.</p>

            <p>DNN provides built-in caching with the Cache API to improve your module's performance. If you use DNN's DAL or DAL+ APIs you should implement the <xref format="html" scope="external" href="https://msdn.microsoft.com/en-us/library/dn589799.aspx">Cache-Aside Pattern</xref> to ensure optimum performance. The DAL2 provides built-in caching which you configure using attributes in your code.</p>

            <p>You can use caching for:
                <ul>
                    <li>Any data that is expensive to compute and yields the same results for a period of time.</li>
                    <li>Any data segment that is invariant for a subset of users or for a specific URL.</li>
                </ul>
            </p>

            <p>The Cache API can be extended to use different cache stores. The abstraction provided by the Cache API ensures that modules perform seamlessly, regardless of the caching provider installed by the site administrator.</p>

            <note type="tip">If a class would be stored in the cache, mark it <codeph>[Serializable]</codeph> to ensure that it is stored correctly by out of process caching providers.</note>

            <codeblock> <!-- C# -->
    [Serializable]
    public class MyInfoClass
    {
        // Property declarations...
    }
            </codeblock>
        </section>


        <section id="BusinessLogicLayer">
            <title>Business Logic Layer</title>

            <p>The business logic layer is where most of your business rules will be implemented. These rules can be as simple as validating data or as complex as orchestrating workflows across multiple backend systems. This layer is also responsible for coordinating calls to the caching and data access layers.</p>

            <p>DNN provides APIs for handling common tasks like application security, file storage, list management, event logging, full-text search and many more. These APIs are fully abstracted and extensible so you can focus on just the business rules that are specific to your module.</p>
        </section>


        <section id="ServiceLayer">
            <title>Service Layer</title>

            <p>DNN offers a Service Framework, built using ASP.NET Web API, that you can use for quickly defining web services. The Service Framework provides integrated access to common DNN entities within your service methods, so that your service can determine what site is being called, the user making the request, and the module facilitating the request. You can also secure your web services by specifying which applications and which users can access your service endpoints.</p>
        </section>


        <section id="PresentationLayer">
            <title>Presentation Layer</title>

            <p>The core component in the presentation layer is the <term>module control</term>. Every unique view of a module is registered as a module control in the <xref format="dita" href="../Extensions/DNNManifestSchema.dita">DNN Manifest</xref>.</p>

            <p>DNN APIs make it easy to access any module control, thus simplifying view management within your module.</p>

            <p>Alternatively, modules can implement their own view dispatch methods to control when specific views are shown or how the module appears on the page.</p>

            <p>Historically, the module control was implemented as an ASP.NET User Control. In Web Forms development, this is a natural element to use as the primary view component. With the introduction of SPA and MVC module types in DNN 8.0, DNN expanded the definition of module controls to more fully encompass the differences between the view rendering pipelines of the various frameworks.</p>

            <p>For Web Forms modules, the primary view component is an ASP.NET User Control. In DNN this is called a module control. For MVC and SPA modules, DNN expanded the definition of module controls to accommodate their alternative view rendering pipelines.</p>
        </section>

    </conbody>

</concept>
