<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.2/os/dtd1.2/technicalContent/dtd/topic.dtd">
<topic xml:lang="en" id="top-AboutJWT">

    <title>About JSON Web Token</title>
    <titlealts>
        <navtitle>About JWT</navtitle>
    </titlealts>

    <prolog>
        <author>ERT</author>
        <copyright>
            <copyryear year="2016"></copyryear>
            <copyrholder>DNN Corp</copyrholder>
        </copyright>
        <metadata>
            <audience type="administrator" job="installing" />
            <audience type="programmer" job="programming" />
        </metadata>
    </prolog>

    <body>

        <section id="Overview">
            <title>Overview</title>

            <p>JSON Web Token (JWT) is an IETF-standardized format, intended for transmitting JavaScript Object Notation (JSON) objects where space is limited, such as HTTP headers and URI queries.</p>

            <ul>
                <li>Compact. JSON objects are simpler and more compact than Security Assertion Markup Language (SAML) assertions, which use XML.</li>

                <li>Self-contained. JWTs can contain all the information about the user to avoid querying the database unnecessarily.</li>

                <li>Verifiable information. The information can be digitally signed using a secret with the HMAC algorithm or using a public/private key pair using RSA.</li>

                <li>Easy to implement.</li>
            </ul>

            <p>JWT is ideal for applications that cannot or don't want to use cookies, such as mobile native apps and desktop apps. In a standard web-forms application, the user logs into a web site and receives a session/token cookie that the browser sends back with each subsequent request to the site, in order to avoid checking the user's credentials with each request. JWT simply replaces the cookie with a token that is smaller and, therefore, faster to transmit.</p>

        </section>


        <section id="AnatomyOfJWT">
            <title>Anatomy of a JWT</title>
            <p>JSON Web Tokens are comprised of the three parts separated by dots; i.e., <codeph>header.payload.signature</codeph> .</p>
            <ul>
                <li>Header. A JSON object containing metadata, such as the algorithm used for the hash/encryption of the signature. Converted to octets of the UTF-8 representation of the JavaScript Object Signing and Encryption (JOSE) Header, and then encoded as a Base64 string.</li>
                <li>Payload. A JWT Claims Set, which is a JSON object that contains the claims. Claims are asserted pieces of information about the user. Encoded as a Base64 string.</li>
                <li>Signature. The hash/encryption of the header and payload. Encoded as a Base64 string.</li>
            </ul>

            <example>
                <p>A JWT Claims Set with three claims:</p>
                <codeblock>
    {"iss":"joe",
     "exp":1300819380,
     "http://example.com/is_root":true}
                </codeblock>
            </example>
        </section>


        <section id="DNNJWTAuth">
            <title>DNN authentication using JWT</title>

            <p>All DNN products support JWT for authentication. This allows DNN modules to send and receive user information without using cookies.</p>
        </section>


        <section id="DNNJWTwebconfig">
            <title>JWT Authentication Handler in DNN</title>

            <p>After the JWT Authentication Handler is installed in DNN, the <filepath>web.config</filepath> file is updated with a line similar to the following:</p>

            <codeblock conkeyref="k-bptext/codeblock-JWT"></codeblock>

            <simpletable relcolwidth="1* 1* 3*">
                <sthead>
                    <stentry>Parameter</stentry>
                    <stentry>Allowed Values</stentry>
                    <stentry>Description</stentry>
                </sthead>
                <strow>
                    <stentry>name</stentry>
                    <stentry>string</stentry>
                    <stentry>Name of the authentication provider. Must be unique within the <codeph>messageHandlers</codeph> section.</stentry>
                </strow>
                <strow>
                    <stentry>enabled</stentry>
                    <stentry><codeph>true</codeph> or <codeph>false</codeph></stentry>
                    <stentry>If <codeph>true</codeph>, an instance of the provider is created and added to the chain of providers when the application starts. Otherwise, the provider is not instantiated at all.</stentry>
                </strow>
                <strow>
                    <stentry>defaultInclude</stentry>
                    <stentry><codeph>true</codeph> or <codeph>false</codeph></stentry>
                    <stentry>If <codeph>true</codeph>, the provider is included for each Web API request, if the API controller limits the allowed providers that can be handled by the different services within the controller.</stentry>
                </strow>
                <strow>
                    <stentry>forceSSL</stentry>
                    <stentry><codeph>true</codeph> or <codeph>false</codeph></stentry>
                    <stentry>If <codeph>true</codeph>, SSL mode (HTTPS) is required for API requests; otherwise, all requests are accepted.
                        <note type="tip">Enforce SSL, so that tokens are treated the same way cookies are treated in a web request, thereby, preventing unauthorized access to the site.</note>
                    </stentry>
                </strow>
            </simpletable>

        </section>

    </body>

    <related-links>
        <link format="html" scope="external" href="https://tools.ietf.org/html/rfc7519"><linktext>IETF RFC 7519</linktext></link>
        <link format="html" scope="external" href="http://www.slideshare.net/dnnsoftware/how-evoq-helps-you-build-modern-web-applications"><linktext>DNN Presentation: How Evoq Helps You Build Modern Web Applications by Will Morgenweck</linktext></link>
        <link format="html" scope="external" href="https://jwt.io/introduction/"><linktext>jwt.io</linktext></link>

    </related-links>
</topic>
