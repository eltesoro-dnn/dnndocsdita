<?xml version="1.0" encoding="UTF-8"?>
<!--This file is part of the DITA Open Toolkit project. See the accompanying LICENSE.md file for applicable licenses.-->


<project name="DNNDC" default="all" basedir=".">
    <description>Build DNN Doc Center</description>


    <!-- Set properties/variables. -->

    <property environment="env"/>


    <property name="dita.home" location="${env.DITA_HOME}"/>
    <condition property="dita.home" value= "${basedir}/.." >
        <not><isset property="env.DITA_HOME"/></not>
    </condition>

    <property name="git.dir" location="${env._gitdir}"/>
    <condition property="git.dir" value= "w:\." >
        <not><isset property="env._gitdir"/></not>
    </condition>

    <property name="bld.dir" location="${env._blddir}"/>
    <condition property="bld.dir" value= "v:\." >
        <not><isset property="env._blddir"/></not>
    </condition>



    <!-- Define the main macro. -->

    <macrodef name="dita-ot">
        <attribute name="transtype"/>
        <attribute name="input"/>
        <attribute name="output"/>

        <element name="properties" optional="yes"/>

        <sequential>
            <antcall>
                <target name="generate-msg-topic"/>
                <target name="generate-params-topic"/>
            </antcall>

            <ant antfile="${dita.home}/build.xml">
                <property name="args.input" location="@{input}"/>
                <property name="output.dir" location="@{output}"/>
                <property name="transtype" value="@{transtype}"/>
                <properties/>
            </ant>
        </sequential>
    </macrodef>



    <!-- Define the targets. -->

    <target name="check-dita-home">
        <available file="${dita.home}/lib/dost.jar" type="file" property="dita-ot.available"/>

        <fail unless="dita-ot.available">
                ${dita.home}/lib/dost.jar not found.

                Does ${dita.home} contain a working DITA-OT installation?

                Set the $DITA_HOME environment variable or the dita.home Ant property to
                point to a working DITA-OT installation:

                Either:

                    $ export DITA_HOME=/path/to/dita-ot
                    $ ant ...

                Or:

                    $ ant -Ddita.home=/path/to/dita-ot
        </fail>
    </target>

    <target name="init" depends="check-dita-home">
        <property name="thm.src.dir"   location="${bld.dir}/_themes/dnn"/>
        <property name="doc.tgt.dir"   location="${bld.dir}/output"/>
        <property name="log.tgt.dir"   location="${bld.dir}/logs"/>
        <property name="docsrc.dir"    location="${dita.home}/docsrc/resources"/>
        <property name="resources.dir" location="${dita.home}/resources"/>
        <property name="ditaval.file"  location="${log.tgt.dir}/platform.ditaval"/>
        <property name="params.file"   location="${bld.dir}/output/logs"/>
    </target>

    <target name="generate-msg-topic" depends="init" description="Regenerate message/log? file.">
        <property name="message.xsl"         file="${docsrc.dir}/messages.xsl"/>
        <property name="message.input"       file="${resources.dir}/messages.xml"/>
        <property name="message.outputtopic" file="${log.tgt.dir}/DITA-messages.xml"/>

        <!--ant antfile="${dita.home}/integrator.xml" useNativeBaseDir="true"/-->
        <xslt in="${message.input}" out="${message.outputtopic}" style="${message.xsl}"/>
    </target>

    <target name="generate-params-topic" depends="init" description="Regenerate parameters file.">
        <property name="params.xsl" file="${docsrc.dir}/params.xsl"/>
        <property name="params.input" file="${resources.dir}/plugins.xml"/>
        <property name="params.outputtopic" file="${bld.dir}/parameters/_all-parameters.dita"/>
        <dirname property="params.outputdir" location="${params.outputtopic}"/>
        <makeurl property="params.outputdir.uri" location="${params.outputdir}" validate="false"/>

        <!--ant antfile="${dita.home}/integrator.xml" useNativeBaseDir="true"/-->
        <xslt in="${params.input}" out="${params.outputtopic}" style="${params.xsl}" force="yes">
            <param name="output-dir.url" expression="${params.outputdir.uri}"/>
        </xslt>
    </target>

    <target name="generate-platform-filter" depends="init" description="Generate platform filter file">
        <condition property="platform" value="windows">
            <os family="windows"/>
        </condition>

        <condition property="platform" value="osx">
            <os family="mac"/>
        </condition>

        <condition property="platform" value="unix">
            <os family="unix"/>
        </condition>

        <echoxml file="${ditaval.file}">
            <val>
                <prop action="include" att="platform" val="${platform}"/>
                <prop action="exclude" att="platform"/>
            </val>
        </echoxml>
    </target>

    <target name="preptgt" depends="cleantgt" description="Prepare the staging/build and output directories.">
    <!--
        <echo level="info">Copying files to build directory ....</echo>
        <copy todir="${bld.dir}/." verbose="yes">
            <fileset dir="${git.dir}" casesensitive="false" includes="*.dita*, *.png, 26D3F6_6_0.*"/>
        </copy>
        <copy todir="${bld.dir}/common/samples" verbose="yes">
            <fileset dir="${git.dir}/common/samples" casesensitive="false" includes="*.*"/>
        </copy>

        <echo level="info">Copying files to output directory ....</echo>
        <copy todir="${doc.tgt.dir}/common/samples" verbose="yes">
            <fileset dir="${git.dir}/common/samples" casesensitive="false" includes="*.*"/>
        </copy>
    -->
    </target>


    <target name="cleantgt" description="Clean the build and output directories.">
    <!--
        <delete includeemptydirs="true">
            <fileset dir="${doc.tgt.dir}"   casesensitive="false" />
            <fileset file="${bld.dir}/*.*"  casesensitive="false" />
            <fileset file="${ditaval.file}" casesensitive="false" />
        </delete>
    -->
    </target>



    <!-- Final targets. -->

    <target name="all" depends="html5"/> <!-- pdf, htmlhelp -->

    <target name="html5" depends="preptgt">
        <echo level="info">Building html5 ....</echo>
        <dita-ot transtype="html5" input="docctr.ditamap" output="${doc.tgt.dir}/html5">
            <properties>
                <property name="args.copycss" value="yes"/>
                <property name="args.css" value="dnndocs.css"/>
                <property name="args.cssroot" value="${thm.src.dir}/static"/>
                <property name="args.csspath" value="css"/>
                <property name="args.gen.task.lbl" value="YES"/>
                <property name="args.hdr" value="${thm.src.dir}/header.xml"/>
                <property name="args.ftr" value="${thm.src.dir}/footer.xml"/>
                <property name="args.xhtml.toc" value="toc"/>
                <property name="nav-toc" value="partial"/>
                <property name="processing-mode" value="strict"/>
            </properties>
        </dita-ot>
    </target>





    <!--
    <target name="filter-platform" depends="generate-platform-filter" description="Filter output by current platform">
        <property name="args.filter" location="${ditaval.file}"/>
    </target>

    <target name="pdf">
        <dita-ot transtype="pdf" input="docctr-pdf.ditamap" output="${doc.tgt.dir}/pdf">
            <properties>
                <property name="outputFile.base" value="userguide"/>
                <property name="processing-mode" value="strict"/>
            </properties>
        </dita-ot>
    </target>
    -->

    <!--
    <target name="htmlhelp">
        <dita-ot transtype="htmlhelp" input="docctr.ditamap" output="${doc.tgt.dir}/htmlhelp">
            <properties>
                <property name="args.copycss" value="yes"/>
                <property name="args.css" value="dnndocs.css"/>
                <property name="args.cssroot" value="${thm.src.dir}/static"/>
                <property name="args.csspath" value="css"/>
                <property name="args.gen.task.lbl" value="YES"/>
                <property name="processing-mode" value="strict"/>
            </properties>
        </dita-ot>

        <move todir="${doc.out.dir}" failonerror="no">
            <fileset dir="${doc.out.dir}/htmlhelp" includes="*.chm"/>
        </move>

        <delete dir="${doc.out.dir}/htmlhelp"/>
    </target>

    <target name="clean">
        <delete dir="${doc.out.dir}"/>
        <delete dir="${ditaval.file}" failonerror="false"/>
    </target>
    -->


</project>
